/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppRouteImport } from './routes/_app'
import { Route as AppIndexRouteImport } from './routes/_app/index'
import { Route as AuthRegisterRouteImport } from './routes/_auth/register'
import { Route as AuthLoginRouteImport } from './routes/_auth/login'
import { Route as AppSystemIndexRouteImport } from './routes/_app/system/index'
import { Route as AppStudentsIndexRouteImport } from './routes/_app/students/index'
import { Route as AppSettingsIndexRouteImport } from './routes/_app/settings/index'
import { Route as AppReportsIndexRouteImport } from './routes/_app/reports/index'
import { Route as AppCollectionIndexRouteImport } from './routes/_app/collection/index'

const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/_auth/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/_auth/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AppSystemIndexRoute = AppSystemIndexRouteImport.update({
  id: '/system/',
  path: '/system/',
  getParentRoute: () => AppRoute,
} as any)
const AppStudentsIndexRoute = AppStudentsIndexRouteImport.update({
  id: '/students/',
  path: '/students/',
  getParentRoute: () => AppRoute,
} as any)
const AppSettingsIndexRoute = AppSettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => AppRoute,
} as any)
const AppReportsIndexRoute = AppReportsIndexRouteImport.update({
  id: '/reports/',
  path: '/reports/',
  getParentRoute: () => AppRoute,
} as any)
const AppCollectionIndexRoute = AppCollectionIndexRouteImport.update({
  id: '/collection/',
  path: '/collection/',
  getParentRoute: () => AppRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/': typeof AppIndexRoute
  '/collection': typeof AppCollectionIndexRoute
  '/reports': typeof AppReportsIndexRoute
  '/settings': typeof AppSettingsIndexRoute
  '/students': typeof AppStudentsIndexRoute
  '/system': typeof AppSystemIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/': typeof AppIndexRoute
  '/collection': typeof AppCollectionIndexRoute
  '/reports': typeof AppReportsIndexRoute
  '/settings': typeof AppSettingsIndexRoute
  '/students': typeof AppStudentsIndexRoute
  '/system': typeof AppSystemIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/register': typeof AuthRegisterRoute
  '/_app/': typeof AppIndexRoute
  '/_app/collection/': typeof AppCollectionIndexRoute
  '/_app/reports/': typeof AppReportsIndexRoute
  '/_app/settings/': typeof AppSettingsIndexRoute
  '/_app/students/': typeof AppStudentsIndexRoute
  '/_app/system/': typeof AppSystemIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/register'
    | '/'
    | '/collection'
    | '/reports'
    | '/settings'
    | '/students'
    | '/system'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/register'
    | '/'
    | '/collection'
    | '/reports'
    | '/settings'
    | '/students'
    | '/system'
  id:
    | '__root__'
    | '/_app'
    | '/_auth/login'
    | '/_auth/register'
    | '/_app/'
    | '/_app/collection/'
    | '/_app/reports/'
    | '/_app/settings/'
    | '/_app/students/'
    | '/_app/system/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_auth/register': {
      id: '/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/system/': {
      id: '/_app/system/'
      path: '/system'
      fullPath: '/system'
      preLoaderRoute: typeof AppSystemIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/students/': {
      id: '/_app/students/'
      path: '/students'
      fullPath: '/students'
      preLoaderRoute: typeof AppStudentsIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/settings/': {
      id: '/_app/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AppSettingsIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/reports/': {
      id: '/_app/reports/'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof AppReportsIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/collection/': {
      id: '/_app/collection/'
      path: '/collection'
      fullPath: '/collection'
      preLoaderRoute: typeof AppCollectionIndexRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRouteChildren {
  AppIndexRoute: typeof AppIndexRoute
  AppCollectionIndexRoute: typeof AppCollectionIndexRoute
  AppReportsIndexRoute: typeof AppReportsIndexRoute
  AppSettingsIndexRoute: typeof AppSettingsIndexRoute
  AppStudentsIndexRoute: typeof AppStudentsIndexRoute
  AppSystemIndexRoute: typeof AppSystemIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppIndexRoute: AppIndexRoute,
  AppCollectionIndexRoute: AppCollectionIndexRoute,
  AppReportsIndexRoute: AppReportsIndexRoute,
  AppSettingsIndexRoute: AppSettingsIndexRoute,
  AppStudentsIndexRoute: AppStudentsIndexRoute,
  AppSystemIndexRoute: AppSystemIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
